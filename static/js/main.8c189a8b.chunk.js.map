{"version":3,"sources":["genericFunctions.js","ServerControls.js","CPUControl.js","RAMControl.js","StartDialog.js","App.js","serviceWorker.js","index.js","computeEngineAPI.js","status-working-28.gif"],"names":["module","exports","isNumber","str","test","ServerControls","this","props","startServer","stopServer","control","server","status","className","title","src","working","alt","onClick","bind","viewBox","fill","d","React","Component","CPUControl","machineType","guestCpus","marxanserver","processor_count","RAMControl","Number","memoryMb","toFixed","ram","TIMEOUTS","text","minutes","StartDialog","state","timeout","username","password","setUserPassword","setMachineType","setTimeout","hideStartDialog","e","setState","target","value","machinetype_options","machineTypes","map","mt","name","key","description","timeout_options","style","display","open","onChange","onChangeMachineType","type","changeUser","changePassword","onCancel","GCP_ZONE","App","loginText","loginTitle","marxanServers","clickedServer","loggedIn","vms","serversLoaded","startDialogOpen","invalidLogin","failedToStartServer","failedToSetMachineType","initialiseServers","window","MARXAN_SERVERS","signOut","then","login","basicProfile","getName","getEmail","_getVMs","getMachineTypesForProject","filter","available","sortObjectArray","getVMs","_vms","dynamicStatuses","Set","forEach","_vm","has","pollServer","getVM","getMarxanServerForVM","vmConfig","clearInterval","vm_timer","timer","undefined","updateMarxanServerShutdowntime","pollMarxanServer","updateMarxanServerStatus","item","Object","assign","arr","sortField","sort","a","b","toLowerCase","clearMarxanPolling","_getVM","setInterval","getServerCapabilities","_marxanserver","offline","authenticate","setupShutdown","Promise","resolve","reject","fetchJsonp","endpoint","response","json","hasOwnProperty","catch","ex","Date","miliSecondsTimeout","shutdowntime","getTime","toString","callShutdown","alert","error","console","log","instanceName","matching_marxanservers","length","matching_vms","_marxanservers","getMachineType","event","_mt","fullMachineType","selfLink","gapi","client","compute","instances","startVM","err","start","stop","row","vm","getVMForMarxanServer","original","configureServer","stopVM","attribute","local_time","parse","toLocaleString","getAllServerCapabilities","promiseArray","i","push","all","protocol","host","port","guestUserEnabled","machine","serverData","MACHINE","client_version","MARXAN_CLIENT_VERSION","server_version","MARXAN_SERVER_VERSION","node","NODE","processor","PROCESSOR","PROCESSOR_COUNT","RAM","release","RELEASE","system","SYSTEM","version","VERSION","wdpa_version","WDPA_VERSION","planning_grid_units_limit","PLANNING_GRID_UNITS_LIMIT","disk_space","DISK_FREE_SPACE","SHUTDOWNTIME","SERVER_NAME","SERVER_DESCRIPTION","tableCols","Header","accessor","width","headerStyle","Cell","renderStatus","renderWithTitle","renderCPUs","renderRAM","unshift","borderRight","renderControls","renderShutdownTime","toggleLoginState","xmlns","height","class","showPagination","minRows","data","columns","marxanserverendpoint","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","loadOAuth2Client","loadClient","load","auth2","init","client_id","getAuthInstance","signIn","scope","userData","getBasicProfile","disconnect","project","zone","list","result","items","resourceId","get","region","getProjectRegion","projectData","cpu_quota","quotas","metric","limit","getProject","projects","regions"],"mappings":"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","file":"static/js/main.8c189a8b.chunk.js","sourcesContent":["module.exports = {\n\t// returns a boolean if it is a valid number\n\tisNumber: function (str) {\n\t\tvar pattern = /^\\d+$/;\n\t\treturn pattern.test(str); \n\t}\n};","import React from 'react';\nimport working from './status-working-28.gif';\n\nclass ServerControls extends React.Component {\n    startServer(){\n        this.props.startServer();\n    }\n    stopServer(){\n        this.props.stopServer();\n    }\n\trender() {\n\t    let control;\n\t    switch (this.props.server.status) {\n\t    \tcase 'PROVISIONING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being provisioned'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'STAGING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being staged'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'RUNNING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is running. Click to stop.'} onClick={this.stopServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#00C752\" d=\"M5.50183983,10.4944805 L5.50367966,10.4963203         L12.8482451,3.15175489         C13.5762779,4.25592793 14,5.57848014 14,7         C14,10.866 10.866,14 7,14 C3.134,14 0,10.866 0,7         C0,3.134 3.134,0 7,0         C8.67832535,0 10.218695,0.590646458 11.4245848,1.57541523         L11.4245848,1.57541523 L5.50183983,7.49816017         L3.50183983,5.49816017 L2.00183983,6.99816017         L5.5,10.4963203 L5.50183983,10.4944805 Z\"></path>  </svg></div>;\n\t    \t\tbreak;\n\t        case 'STOPPING':\n\t        \tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being stopped'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t        \tbreak;\n\t    \tcase 'REPAIRING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being repaired'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t        case 'TERMINATED':\n\t            control = <div className={'serverStatusIconContainer'} title={'The server is stopped. Click to start.'} onClick={this.startServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#A9A9A9\" d=\"M7,14 C10.8659932,14 14,10.8659932 14,7         C14,3.13400675 10.8659932,0 7,0         C3.13400675,0 0,3.13400675 0,7         C0,10.8659932 3.13400675,14 7,14 Z         M4,4.99077797 C4,4.44358641 4.45097518,4 4.99077797,4         L9.00922203,4 C9.55641359,4 10,4.45097518 10,4.99077797         L10,9.00922203 C10,9.55641359 9.54902482,10 9.00922203,10         L4.99077797,10 C4.44358641,10 4,9.54902482 4,9.00922203         L4,4.99077797 Z\"></path>  </svg></div>;\n\t            break;\n\t        default:\n\t            break;\n\t    }\n\t    return(\n            <div>{control}</div>\n        );\n\t}\n}\n\nexport default ServerControls;","import React from 'react';\n\nclass CPUControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div>{this.props.machineType.guestCpus}</div> :\n\t\t\t<div>{this.props.marxanserver.processor_count}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default CPUControl;\n","import React from 'react';\n\nclass RAMControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div>{(Number(this.props.machineType.memoryMb)/1000).toFixed(1)} Gb</div> :\n\t\t\t<div>{this.props.marxanserver.ram}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default RAMControl;\n","import React from 'react';\n\nlet TIMEOUTS = [{text: '2 minutes', minutes: \"2\"},{ text: '1 hour', minutes: \"60\" }, { text: '2 hours', minutes: \"120\" }, { text: '3 hours', minutes: \"180\" }, { text: '4 hours', minutes: \"240\" }, { text: '5 hours', minutes: \"300\" }, { text: '6 hours', minutes: \"360\" }, { text: '7 hours', minutes: \"420\" }, { text: '8 hours', minutes: \"480\" }];\n\nclass StartDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { timeout: \"60\", username: '', password: ''};\n    }\n    startServer() {\n        this.props.setUserPassword(this.state.username, this.state.password);\n        this.props.setMachineType();\n        this.props.setTimeout(this.state.timeout);\n        this.props.hideStartDialog();\n    }\n    onCancel(e) {\n        this.props.hideStartDialog();\n    }\n    setTimeout(e) {\n        this.setState({ timeout: e.target.value });\n    }\n    changeUser(e) {\n        this.setState({ username: e.target.value });\n    }\n    changePassword(e) {\n        this.setState({ password: e.target.value });\n    }\n    render() {\n        let machinetype_options = this.props.machineTypes.map(mt => {\n            return <option value={mt.name} key={mt.name}>{mt.description}</option>;\n        });\n        let timeout_options = TIMEOUTS.map(timeout => {\n            return <option value={timeout.minutes} key={timeout.text}>{timeout.text}</option>;\n        });\n        return (\n            <div className='dialog' style={{display: (this.props.open) ? 'block' : 'none'}}>\n\t\t\t    <div className='dialoginner'>\n    \t\t\t    <div className={'heading'}>Choose a machine type:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.props.onChangeMachineType.bind(this)} value={this.props.machineType}>{machinetype_options}</select>\n    \t\t\t    <div className={'heading'}>Choose a timeout:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.setTimeout.bind(this)} value={this.state.timeout}>{timeout_options}</select>\n    \t\t\t    <div className={'heading'}>Username:</div>\n    \t\t\t    <input type=\"text\" onChange={this.changeUser.bind(this)}/>\n    \t\t\t    <div className={'heading'}>Password:</div>\n    \t\t\t    <input type=\"password\" onChange={this.changePassword.bind(this)}/>\n    \t\t\t    <div className={'toppad20'}>\n    \t\t\t        <button type=\"button\" onClick={this.onCancel.bind(this)}>Cancel</button>\n    \t\t\t        <button type=\"button\" onClick={this.startServer.bind(this)}>OK</button>\n    \t\t\t    </div>\n\t\t\t    </div>\n\t\t\t</div>\n        );\n    }\n}\n\nexport default StartDialog;\n","/*global gapi*/\nimport './App.css';\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport ServerControls from './ServerControls';\nimport CPUControl from './CPUControl';\nimport RAMControl from './RAMControl';\nimport StartDialog from './StartDialog';\nimport 'react-table/react-table.css';\nimport fetchJsonp from 'fetch-jsonp';\nimport { login, signOut, getVMs, getVM, getMachineTypesForProject } from './computeEngineAPI.js';\nimport { isNumber } from './genericFunctions.js';\n\n//CONSTANTS\nlet TORNADO_PATH = \"/marxan-server/\";\nlet GCP_PROJECT = \"marxan-web\";\nlet GCP_REGION = \"us-central1\";\nlet GCP_ZONE = \"us-central1-a\";\n// let GCP_PROJECT = \"geeimageserver\";\n// let GCP_REGION = \"europe-west6\";\n// let GCP_ZONE = \"europe-west6-a\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loginText: \"Sign in\", loginTitle: 'Click to sign in', marxanServers: [], clickedServer: {}, loggedIn: false, vms: [], serversLoaded: false, machineTypes: [], startDialogOpen: false, machineType: '', timeout: 60, invalidLogin: false, failedToStartServer: false, failedToSetMachineType: false };\n    this.initialiseServers(window.MARXAN_SERVERS);\n  }\n  toggleLoginState() {\n    if (this.state.loggedIn){\n      signOut().then(()=>{\n        this.setState({ loggedIn: false, loginText: 'Sign in', loginTitle: 'Signed in as ' });\n      });\n    }else{\n      login().then((basicProfile) => {\n        //set the state\n        this.setState({ loggedIn: true, loginText: 'Sign out', loginTitle: 'Signed in as:' + basicProfile.getName() + \" (\" + basicProfile.getEmail() + \")\" });\n        //get the VMs\n        this._getVMs();\n        //get an array of the machine types available for the project\n        getMachineTypesForProject(GCP_PROJECT, GCP_REGION, GCP_ZONE).then((machineTypes) => {\n          //filter the machine types for c2 types (compute-optimised) and n1 (general purpose)\n          // machineTypes = machineTypes.filter(mt => (mt.name.substr(0, 3) === 'c2-' || mt.name.substr(0, 3) === 'n1-'));\n          //filter the machine types for available ones only\n          machineTypes = machineTypes.filter(mt => (mt.available));\n          //sort by the description\n          this.sortObjectArray(machineTypes, 'guestCpus');\n          this.setState({ machineTypes: machineTypes });\n        });\n      });\n    }\n  }\n  //gets a list of VMs for the project and zone\n  _getVMs() {\n    //get the VMs\n    getVMs(GCP_PROJECT, GCP_ZONE).then((_vms) => {\n      //if the initial state of any of the VMs is STOPPING, PROVISIONING,STAGING,REPAIRING then start polling as they will change\n      let dynamicStatuses = new Set(['STOPPING', 'PROVISIONING','STAGING','REPAIRING']);\n      _vms.forEach(_vm=>{\n        if (dynamicStatuses.has(_vm.status)) this.pollServer(_vm);\n      });\n      this.setState({ vms: _vms });\n    });\n  }\n  //gets data for a single VM\n  _getVM(server) {\n    getVM(GCP_PROJECT, GCP_ZONE, server.name).then((_vm) => {\n      //get the matching marxan server from the VM\n      let marxanserver = this.getMarxanServerForVM(server.name);\n      //see if the servers status has changed\n      if (this.vmConfig.status !== _vm.status) {\n        //if the server has stopped or started, then stop polling and remove any timeouts\n        if (_vm.status === 'TERMINATED' || _vm.status === 'RUNNING') {\n          clearInterval(this.vm_timer);\n          this.timer = undefined;\n          //update the marxan servers shutdowntime\n          this.updateMarxanServerShutdowntime(marxanserver, undefined);\n          //if the server has started, then poll to see when the marxan-server has started\n          if (_vm.status === 'RUNNING') this.pollMarxanServer(server);\n        }\n        //if the server is stopping then set the server as offline\n        if (_vm.status === 'STOPPING') {\n          //update the state\n          this.updateMarxanServerStatus(marxanserver, true);\n        }\n        //if the server is stopping after a provisioninf status, then the start failed\n        if (this.vmConfig.status ===\"PROVISIONING\" && _vm.status === \"STOPPING\"){\n          this.setState({failedToStartServer: true});\n        }\n        //update the state\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === server.name) ? Object.assign(item, { status: _vm.status }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms });\n        //save the current configuration to a local variable\n        this.vmConfig = _vm;\n      }\n\n    });\n  }\n  //sorts an object array by the passed sort field\n  sortObjectArray(arr, sortField) {\n    arr.sort((a, b) => {\n      if (isNumber(a[sortField])) {\n        if ((a[sortField] < b[sortField]))\n          return -1;\n        if (a[sortField] > b[sortField])\n          return 1;\n        return 0;\n      }\n      else {\n        if ((a[sortField].toLowerCase() < b[sortField].toLowerCase()) || (a.type === \"local\"))\n          return -1;\n        if (a[sortField].toLowerCase() > b[sortField].toLowerCase())\n          return 1;\n        return 0;\n      }\n    });\n  }\n  //starts polling the server to check for an updated status\n  pollServer(server) {\n    //cancel any polling to marxan if it is happening\n    if (this.timer) this.clearMarxanPolling();\n    //get the initial server configuration\n    this.vmConfig = server;\n    this._getVM(server);\n    //start polling the server at regular intervals\n    this.vm_timer = setInterval(() => {\n      this._getVM(server);\n    }, 1000);\n  }\n  //starts polling the marxan server to check to see when it is online/offline\n  pollMarxanServer(server) {\n    //get the corresponding marxanserver instance\n    let marxanserver = this.getMarxanServerForVM(server.name);\n    //set the offline property to undefined - this will show the loader\n    this.updateMarxanServerStatus(marxanserver, undefined);\n    //poll the server to see if it is ready\n    this.timer = setInterval(() => {\n      this.getServerCapabilities(marxanserver).then((_marxanserver) => {\n        //if the _marxanserver is online then update state, stop polling and set it to shutdown \n        if (!_marxanserver.offline) {\n          this.clearMarxanPolling();\n          //update the state\n          this.updateMarxanServerStatus(marxanserver, false);\n          //authenticate to the marxan-server\n          this.authenticate(marxanserver).then(()=>{\n            //authenticated - now set up the shutdown\n            this.setupShutdown(marxanserver, server);\n          });\n        }\n      });\n    }, 1000);\n  }\n  clearMarxanPolling() {\n    clearInterval(this.timer);\n    this.timeout = undefined;\n  }\n  //authenticates to the marxan server - if successful sets a cookie to be able to call shutdown\n  authenticate(marxanserver) {\n    return new Promise((resolve, reject) => {\n      fetchJsonp(marxanserver.endpoint + \"validateUser?user=\" + this.state.username + \"&password=\" + this.state.password).then((response) => {\n        return response.json();\n      }).then((json) => {\n        if (json.hasOwnProperty('error')) {\n          this.setState({ invalidLogin: true });\n          reject();\n        }\n        resolve();\n      }).catch((ex) => {\n        this.setState({ invalidLogin: true });\n        reject();\n      });\n    });\n  }\n  //calls shutdown on the marxan server\n  setupShutdown(marxanserver, server){\n    //get the time now\n    let d = new Date();\n    //get the shutdown time\n    let miliSecondsTimeout = Number(this.state.timeout)*60000;\n    let shutdowntime = new Date(d.getTime() + miliSecondsTimeout).toString();\n    //update the marxan servers shutdowntime\n    this.updateMarxanServerShutdowntime(marxanserver, shutdowntime);\n    //set the shutdown timer\n    this.callShutdown(marxanserver, this.state.timeout);\n    //configure a callback to start polling the server just before it is stopped\n    setTimeout(() => {\n      this.pollServer(server);\n    }, miliSecondsTimeout - 1000);\n  }\n  //makes the API call to shutdown the marxan-server\n  callShutdown(marxanserver, timeout){\n    fetchJsonp(marxanserver.endpoint + \"shutdown?delay=\" + timeout, { timeout: 1000 }).then((response) => {\n      return response.json();\n    }).then((json) => {\n      if (json.hasOwnProperty('error')){\n        alert(json.error + '\\nUnable to shutdown automatically. Please do it manually.');\n      }\n      console.log(json);\n    }).catch((ex) => {\n      console.log(ex);\n    });\n  }\n  //get marxan server for the VM\n  getMarxanServerForVM(instanceName) {\n    let matching_marxanservers = this.state.marxanServers.filter((item) => (item.instanceName === instanceName));\n    let retVal = (matching_marxanservers.length) ? matching_marxanservers[0] : undefined;\n    return retVal;\n  }\n  //get VM for the marxan server\n  getVMForMarxanServer(server) {\n    if (server.hasOwnProperty('instanceName')) {\n      //iterate through the VM instances to see if we can get a matching one for the marxan server\n      let matching_vms = this.state.vms.filter((item) => (item.name === server.instanceName));\n      //if we have a matching server then return it\n      if (matching_vms.length) {\n        return matching_vms[0];\n      }\n      else {\n        return null;\n      }\n    }\n    else {\n      return null;\n    }\n  }\n  //updates the status of the passed marxan server - status is true/false (offline)\n  updateMarxanServerStatus(marxanserver, status) {\n    //update the state\n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanserver.name) ? Object.assign(item, { offline: status }) : item;\n      return _obj;\n    });\n    this.setState({ marxanServers: _marxanservers });\n  }\n  updateMarxanServerShutdowntime(marxanserver, shutdowntime){\n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanserver.name) ? Object.assign(item, { shutdowntime: shutdowntime }) : item;\n      return _obj;\n    });\n    //set the state\n    this.setState({marxanServers: _marxanservers});\n  }\n  //prompts the user to select a machine type and then starts it\n  configureServer(server) {\n    //get the current machine type\n    let machineType = this.getMachineType(server);\n    machineType = (machineType) ? machineType : { name: '' };\n    //show the machine types dialog\n    this.setState({failedToStartServer: false, failedToSetMachineType: false, startDialogOpen: true, machineType: machineType.name, clickedServer: server});\n  }\n  hideStartDialog() {\n    this.setState({ startDialogOpen: false });\n  }\n  onChangeMachineType(event) {\n    this.setState({ machineType: event.target.value });\n  }\n  //sets the machine type to the passed value and starts the VM\n  setMachineType() {\n    //setMachineType requires the full url - so get this from the machineTypes array\n    let _mt = this.state.machineTypes.filter(_mt => (_mt.name === this.state.machineType));\n    if (_mt.length) {\n      let fullMachineType = _mt[0].selfLink;\n      return gapi.client.compute.instances.setMachineType({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': this.state.clickedServer.name, 'resource': { 'machineType': fullMachineType } }).then((response) => {\n        //update the state with the new machine type\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === this.state.clickedServer.name) ? Object.assign(item, { machineType: fullMachineType }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms});\n        //start the VM\n        this.startVM(this.state.clickedServer);\n      },((err)=>{ \n        this.setState({failedToSetMachineType: true}); \n        console.log(err);\n      }));\n    }\n  }\n  //sets the timeout for how long the server will be running until it shuts down\n  setTimeout(minutes) {\n    this.setState({ timeout: minutes });\n  }\n  setUserPassword(username, password) {\n    this.setState({ username: username, password: password, invalidLogin: false });\n  }\n  //starts a VM\n  startVM(server) {\n    return gapi.client.compute.instances.start({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Start requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  stopVM(marxanserver, server) {\n    //update the marxan servers shutdowntime\n    this.updateMarxanServerShutdowntime(marxanserver, undefined);\n    this.callShutdown(marxanserver, 0);\n    return gapi.client.compute.instances.stop({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Stop requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  renderControls(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    if (vm) {\n      return <ServerControls server={vm} startServer={this.configureServer.bind(this, vm)} stopServer={this.stopVM.bind(this,row.original, vm)}/>;\n    }\n    else {\n      return null;\n    }\n  }\n  renderWithTitle(attribute, row){\n    return <div title={row.original[attribute]}>{row.original[attribute]}</div>;        \n  }\n  renderStatus(row) {\n    return (row.original.offline === undefined) ? \"Starting\" : (row.original.offline) ? \"Offline\" : \"Available\";\n  }\n  renderCPUs(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <CPUControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  renderRAM(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM then we can get the machine type\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <RAMControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  renderShutdownTime(row){\n    //get the local time\n    let local_time = (row.original.shutdowntime !== undefined) ? new Date(Date.parse(row.original.shutdowntime)).toLocaleString() : '';\n    //if there is not a shutdown time and the server is online then set to never\n    if (local_time === '' && row.original.offline === false) local_time = \"Never\";\n    return <div>{local_time}</div>;\n  }\n  //gets the machine type for the VM\n  getMachineType(vm) {\n    let machineTypes = this.state.machineTypes.filter(item => item.selfLink === vm.machineType);\n    return (machineTypes.length) ? machineTypes[0] : null;\n  }\n  //initialises the servers by requesting their capabilities\n  initialiseServers(marxanServers) {\n    return new Promise((resolve, reject) => {\n      //get all the server capabilities - when all the servers have responded, finalise the marxanServers array\n      this.getAllServerCapabilities(marxanServers).then((server) => {\n        //sort the servers by the name \n        this.sortObjectArray(marxanServers, 'name');\n        this.setState({ marxanServers: marxanServers, serversLoaded: true }, () => {\n          resolve(\"ServerData retrieved\");\n        });\n      });\n    });\n  }\n  //gets the capabilities of all servers\n  getAllServerCapabilities(marxanServers) {\n    let promiseArray = [];\n    //iterate through the servers and get their capabilities\n    for (var i = 0; i < marxanServers.length; ++i) {\n      promiseArray.push(this.getServerCapabilities(marxanServers[i]));\n    }\n    //return a promise\n    return Promise.all(promiseArray);\n  }\n\n  //gets the capabilities of the server by making a request to the getServerData method\n  getServerCapabilities(server) {\n    return new Promise((resolve, reject) => {\n      //get the endpoint for all http/https requests\n      let endpoint = server.protocol + \"//\" + server.host + \":\" + server.port + TORNADO_PATH;\n      //set the default properties for the server - by default the server is offline, has no guest access and CORS is not enabled\n      server = Object.assign(server, { endpoint: endpoint, offline: true, guestUserEnabled: false });\n      //poll the server to make sure tornado is running - this uses fetchJsonp which can catch http errors\n      fetchJsonp(endpoint + \"getServerData\", { timeout: 1000 }).then((response) => {\n        return response.json();\n      }).then((json) => {\n        if (json.hasOwnProperty('info')) {\n          //set the flags for the server capabilities\n          server = Object.assign(server, { offline: false, machine: json.serverData.MACHINE, client_version: json.serverData.MARXAN_CLIENT_VERSION, server_version: json.serverData.MARXAN_SERVER_VERSION, node: json.serverData.NODE, processor: json.serverData.PROCESSOR, processor_count: json.serverData.PROCESSOR_COUNT, ram: json.serverData.RAM, release: json.serverData.RELEASE, system: json.serverData.SYSTEM, version: json.serverData.VERSION, wdpa_version: json.serverData.WDPA_VERSION, planning_grid_units_limit: Number(json.serverData.PLANNING_GRID_UNITS_LIMIT), disk_space: json.serverData.DISK_FREE_SPACE, shutdowntime:json.serverData.SHUTDOWNTIME });\n          //if the server defines its own name then set it \n          if (json.serverData.SERVER_NAME !== \"\") {\n            server = Object.assign(server, { name: json.serverData.SERVER_NAME });\n          }\n          //if the server defines its own description then set it \n          if (json.serverData.SERVER_DESCRIPTION !== \"\") {\n            server = Object.assign(server, { description: json.serverData.SERVER_DESCRIPTION });\n          }\n        }\n        //return the server capabilities\n        resolve(server);\n      }).catch((ex) => {\n        //the server does not exist or did not respond before the timeout - return the default properties\n        resolve(server);\n      });\n    });\n  }\n  render() {\n    let tableCols = [\n      { Header: 'Status', accessor: '', width: 100, headerStyle: { 'textAlign': 'left' }, Cell: this.renderStatus.bind(this) },\n      { Header: 'Name', accessor: 'name', width: 200, headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'name') },\n      { Header: 'Host', accessor: 'host', width: 158, headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'host') },\n      { Header: 'Description', accessor: 'description', headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'description') },\n      { Header: 'CPUs', accessor: '', width: 50, headerStyle: { 'textAlign': 'left' }, Cell: this.renderCPUs.bind(this) },\n      { Header: 'RAM', accessor: 'ram', width: 50, headerStyle: { 'textAlign': 'left' }, Cell: this.renderRAM.bind(this) },\n      { Header: 'Space', accessor: 'disk_space', width: 55, headerStyle: { 'textAlign': 'left' } }\n    ];\n    //add the controls column to the table if the user is logged in\n    if (this.state.loggedIn) tableCols.unshift({ Header: 'VM', accessor: 'controlsEnabled', width: 30, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }, Cell: this.renderControls.bind(this) });\n    //add the shutdown column if the user has started a vm with a shutdown\n    tableCols.push({ Header: 'Shutdown', accessor: 'shutdowntime', width: 135, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }, Cell: this.renderShutdownTime.bind(this) });\n    return (\n      <div>\n        <div>Marxan Web</div>\n        <div className={'loginBtn'} onClick={this.toggleLoginState.bind(this)}>\n            <div className={'logodiv'}>\n              <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18px\" height=\"18px\" viewBox=\"0 0 48 48\" class=\"_svg\"><g><path fill=\"#EA4335\" d=\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\"></path><path fill=\"#4285F4\" d=\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\"></path><path fill=\"#FBBC05\" d=\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\"></path><path fill=\"#34A853\" d=\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\"></path><path fill=\"none\" d=\"M0 0h48v48H0z\"></path></g></svg>        \n              <div className={'logintext'} title={this.state.loginTitle}>{this.state.loginText}</div>\n            </div>\n        </div>\n        <div className={'tableContainer'} style={{display: (this.state.serversLoaded) ? 'block' : 'none'}}>\n      \t\t<ReactTable \n            className={'serversTable'}\n            showPagination={false} \n            minRows={0}\n            data={this.state.marxanServers}\n            columns={tableCols}\n      \t\t/> \n      \t\t<div className={'invalidLogin'} style={{display: (this.state.invalidLogin) ? 'block' : 'none'}}>Invalid login credentials - unable to shutdown automatically. Please do it manually.</div>\n      \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToStartServer) ? 'block' : 'none'}}>Failed to start server. Stopping. Try fewer CPUs.</div>\n      \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToSetMachineType) ? 'block' : 'none'}}>Failed to set the machine type. Try a different one.</div>\n    \t\t</div>\n    \t\t<StartDialog \n    \t\t  open={this.state.startDialogOpen} \n    \t\t  machineTypes={this.state.machineTypes} \n    \t\t  machineType={this.state.machineType} \n    \t\t  onChangeMachineType={this.onChangeMachineType.bind(this)} \n    \t\t  setMachineType={this.setMachineType.bind(this)} \n    \t\t  hideStartDialog={this.hideStartDialog.bind(this)} \n    \t\t  setTimeout={this.setTimeout.bind(this)} \n    \t\t  setUserPassword={this.setUserPassword.bind(this)}\n    \t\t  marxanserverendpoint={this.state.marxanserverendpoint}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//this is a light wrapper around the Google API Client Library for JavaScript (https://github.com/google/google-api-javascript-client)\n/*global gapi*/\nmodule.exports = {\n\tlogin: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//get the OAuth2 client library\n\t\t\tmodule.exports.loadOAuth2Client().then(() => {\n\t\t\t\t//authenticate the user\n\t\t\t\tmodule.exports.authenticate().then((basicProfile) => {\n\t\t\t\t\t//load the Compute API\n\t\t\t\t\tmodule.exports.loadClient().then(() => {\n\t\t\t\t\t\tresolve(basicProfile);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t},\n\tloadOAuth2Client: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.load(\"client:auth2\", function() {\n\t\t\t\t// gapi.auth2.init({ client_id: \"525442053161-ua4flmb201fv8m2tek8ijhuobohur4vs.apps.googleusercontent.com\" }); //for a.cottam\n\t\t\t\tgapi.auth2.init({ client_id: \"956491209288-m1fj9h3udhiviuj0hdvajrp8o7pn13g8.apps.googleusercontent.com\" }); //for marxancloud\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t},\n\tauthenticate: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.auth2.getAuthInstance()\n\t\t\t\t.signIn({ scope: \"https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/compute.readonly\" })\n\t\t\t\t.then((userData)=>{ resolve(userData.getBasicProfile()) },\n\t\t\t\t\tfunction(err) { console.error(\"Error signing in\", err); });\n\t\t});\n\t},\n\tloadClient: function() {\n\t\treturn gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/compute/v1/rest\")\n\t\t\t.then(function() { console.log(\"GAPI client loaded for API\"); },\n\t\t\t\tfunction(err) { console.error(\"Error loading GAPI client for API\", err); });\n\t},\n\t//signs out\n\tsignOut: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar auth2 = gapi.auth2.getAuthInstance();\n\t\t\tauth2.signOut().then(() => {\n\t\t\t\tauth2.disconnect();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t},\n\t//gets the VM instances for the project/zone\n\tgetVMs: function(project, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\t//add the project and zone to each vm\n\t\t\t\tlet _vms = response.result.items.map(item => Object.assign(item, { project: project, zone: zone }));\n\t\t\t\tresolve(_vms);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets data for a single VM\n\tgetVM: function(project, zone, resourceId) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.get({ \"project\": project, \"zone\": zone, 'instance': resourceId }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineTypesForProject: function(project, region, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\tlet machineTypes = response.result.items;\n\t\t\t\t//not all machine types will be available - it will depend of whether you are on a free trial and other factors - but the quota can be retrieved\n\t\t\t\tmodule.exports.getProjectRegion(project, region).then((projectData) => {\n\t\t\t\t\t//get the CPU quota\n\t\t\t\t\tlet cpu_quota = projectData.quotas.filter(item => item.metric === 'CPUS')[0].limit;\n\t\t\t\t\t//add an attribute to all the machine types\n\t\t\t\t\tmachineTypes = machineTypes.map(item => {\n\t\t\t\t\t\treturn Object.assign(item, { available: item.guestCpus <= cpu_quota });\n\t\t\t\t\t});\n\t\t\t\t\tresolve(machineTypes);\n\t\t\t\t});\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project and its quotas\n\tgetProject: function(project) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.projects.get({ \"project\": project }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project in the region and its quotas\n\tgetProjectRegion: function(project, region) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.regions.get({ \"project\": project, \"region\": region }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineType: function(project, zone, machineType) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.get({ \"project\": project, \"zone\": zone, 'machineType': machineType }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t}\n};\n","module.exports = __webpack_public_path__ + \"static/media/status-working-28.639a9d71.gif\";"],"sourceRoot":""}