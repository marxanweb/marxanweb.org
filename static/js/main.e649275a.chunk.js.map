{"version":3,"sources":["computeEngineAPI.js","status-working-28.gif","genericFunctions.js","ServerControls.js","CPUControl.js","RAMControl.js","StartDialog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","login","Promise","resolve","reject","loadOAuth2Client","then","authenticate","basicProfile","loadClient","gapi","load","auth2","init","client_id","getAuthInstance","signIn","scope","userData","getBasicProfile","err","console","error","client","log","signOut","disconnect","getVMs","project","zone","compute","instances","list","response","_vms","result","items","map","item","Object","assign","getVM","resourceId","get","getMachineTypesForProject","region","machineTypes","getProjectRegion","projectData","cpu_quota","quotas","filter","metric","limit","available","guestCpus","getProject","projects","regions","getMachineType","machineType","isNumber","str","test","ServerControls","this","props","startServer","stopServer","control","server","status","className","title","src","working","alt","onClick","bind","viewBox","fill","d","React","Component","CPUControl","style","textAlign","marxanserver","processor_count","RAMControl","Number","memoryMb","toFixed","ram","TIMEOUTS","text","minutes","StartDialog","state","timeout","username","password","setUserPassword","setMachineType","setTimeout","hideStartDialog","e","setState","target","value","machinetype_options","mt","name","key","description","timeout_options","display","open","onChange","onChangeMachineType","type","changeUser","changePassword","onCancel","GCP_ZONE","App","loginText","loginTitle","marxanServers","clickedServer","loggedIn","vms","serversLoaded","startDialogOpen","invalidLogin","failedToStartServer","failedToSetMachineType","initialiseServers","window","MARXAN_SERVERS","authenticated","getName","getEmail","_getVMs","substr","sortObjectArray","dynamicStatuses","Set","forEach","_vm","has","pollServer","getMarxanServerForVM","vmConfig","clearInterval","vm_timer","timer","undefined","updateMarxanServerShutdowntime","pollMarxanServer","updateMarxanServerStatus","arr","sortField","sort","a","b","toLowerCase","clearMarxanPolling","_getVM","setInterval","getServerCapabilities","offline","setupShutdown","fetch","endpoint","ok","Error","statusText","json","hasOwnProperty","alert","Date","miliSecondsTimeout","shutdowntime","getTime","toString","callShutdown","controller","AbortController","signal","timeoutId","abort","credentials","clearTimeout","instanceName","matching_marxanservers","length","matching_vms","_marxanservers","event","_mt","fullMachineType","selfLink","startVM","start","stop","row","vm","getVMForMarxanServer","original","configureServer","stopVM","attribute","disk_space","local_time","parse","toLocaleString","href","rel","getAllServerCapabilities","promises","all","protocol","host","port","guestUserEnabled","machine","serverData","MACHINE","client_version","MARXAN_CLIENT_VERSION","server_version","MARXAN_SERVER_VERSION","node","NODE","processor","PROCESSOR","PROCESSOR_COUNT","RAM","release","RELEASE","system","SYSTEM","version","VERSION","wdpa_version","WDPA_VERSION","planning_grid_units_limit","PLANNING_GRID_UNITS_LIMIT","DISK_FREE_SPACE","SHUTDOWNTIME","SERVER_NAME","SERVER_DESCRIPTION","tableCols","Header","width","headerStyle","Cell","renderStatus","renderWithTitle","renderCPUs","renderRAM","renderSpace","borderRight","renderShutdownTime","unshift","accessor","renderControls","push","renderLink","showPagination","minRows","data","columns","marxanserverendpoint","toggleLoginState","xmlns","height","class","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e649275a.chunk.js","sourcesContent":["//this is a light wrapper around the Google API Client Library for JavaScript (https://github.com/google/google-api-javascript-client)\n/*global gapi*/\nmodule.exports = {\n\tlogin: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//get the OAuth2 client library\n\t\t\tmodule.exports.loadOAuth2Client().then(() => {\n\t\t\t\t//authenticate the user\n\t\t\t\tmodule.exports.authenticate().then((basicProfile) => {\n\t\t\t\t\t//load the Compute API\n\t\t\t\t\tmodule.exports.loadClient().then(() => {\n\t\t\t\t\t\tresolve(basicProfile);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t},\n\tloadOAuth2Client: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.load(\"client:auth2\", function() {\n\t\t\t\t// gapi.auth2.init({ client_id: \"525442053161-ua4flmb201fv8m2tek8ijhuobohur4vs.apps.googleusercontent.com\" }); //for a.cottam\n\t\t\t\tgapi.auth2.init({ client_id: \"956491209288-m1fj9h3udhiviuj0hdvajrp8o7pn13g8.apps.googleusercontent.com\" }); //for marxancloud\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t},\n\tauthenticate: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.auth2.getAuthInstance()\n\t\t\t\t.signIn({ scope: \"https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/compute.readonly\" })\n\t\t\t\t.then((userData)=>{ resolve(userData.getBasicProfile()) },\n\t\t\t\t\tfunction(err) { console.error(\"Error signing in\", err); });\n\t\t});\n\t},\n\tloadClient: function() {\n\t\treturn gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/compute/v1/rest\")\n\t\t\t.then(function() { console.log(\"GAPI client loaded for API\"); },\n\t\t\t\tfunction(err) { console.error(\"Error loading GAPI client for API\", err); });\n\t},\n\t//signs out\n\tsignOut: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar auth2 = gapi.auth2.getAuthInstance();\n\t\t\tauth2.signOut().then(() => {\n\t\t\t\tauth2.disconnect();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t},\n\t//gets the VM instances for the project/zone\n\tgetVMs: function(project, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\t//add the project and zone to each vm\n\t\t\t\tlet _vms = response.result.items.map(item => Object.assign(item, { project: project, zone: zone }));\n\t\t\t\tresolve(_vms);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets data for a single VM\n\tgetVM: function(project, zone, resourceId) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.get({ \"project\": project, \"zone\": zone, 'instance': resourceId }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineTypesForProject: function(project, region, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\tlet machineTypes = response.result.items;\n\t\t\t\t//not all machine types will be available - it will depend of whether you are on a free trial and other factors - but the quota can be retrieved\n\t\t\t\tmodule.exports.getProjectRegion(project, region).then((projectData) => {\n\t\t\t\t\t//get the CPU quota\n\t\t\t\t\tlet cpu_quota = projectData.quotas.filter(item => item.metric === 'CPUS')[0].limit;\n\t\t\t\t\t//add an attribute to all the machine types\n\t\t\t\t\tmachineTypes = machineTypes.map(item => {\n\t\t\t\t\t\treturn Object.assign(item, { available: item.guestCpus <= cpu_quota });\n\t\t\t\t\t});\n\t\t\t\t\tresolve(machineTypes);\n\t\t\t\t});\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project and its quotas\n\tgetProject: function(project) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.projects.get({ \"project\": project }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project in the region and its quotas\n\tgetProjectRegion: function(project, region) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.regions.get({ \"project\": project, \"region\": region }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineType: function(project, zone, machineType) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.get({ \"project\": project, \"zone\": zone, 'machineType': machineType }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t}\n};\n","module.exports = __webpack_public_path__ + \"static/media/status-working-28.639a9d71.gif\";","module.exports = {\n\t// returns a boolean if it is a valid number\n\tisNumber: function (str) {\n\t\tvar pattern = /^\\d+$/;\n\t\treturn pattern.test(str); \n\t}\n};","import React from 'react';\nimport working from './status-working-28.gif';\n\nclass ServerControls extends React.Component {\n    startServer(){\n        this.props.startServer();\n    }\n    stopServer(){\n        this.props.stopServer();\n    }\n\trender() {\n\t    let control;\n\t    switch (this.props.server.status) {\n\t    \tcase 'PROVISIONING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being provisioned'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'STAGING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being staged'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'RUNNING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is running. Click to stop.'} onClick={this.stopServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#00C752\" d=\"M5.50183983,10.4944805 L5.50367966,10.4963203         L12.8482451,3.15175489         C13.5762779,4.25592793 14,5.57848014 14,7         C14,10.866 10.866,14 7,14 C3.134,14 0,10.866 0,7         C0,3.134 3.134,0 7,0         C8.67832535,0 10.218695,0.590646458 11.4245848,1.57541523         L11.4245848,1.57541523 L5.50183983,7.49816017         L3.50183983,5.49816017 L2.00183983,6.99816017         L5.5,10.4963203 L5.50183983,10.4944805 Z\"></path>  </svg></div>;\n\t    \t\tbreak;\n\t        case 'STOPPING':\n\t        \tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being stopped'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t        \tbreak;\n\t    \tcase 'REPAIRING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being repaired'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t        case 'TERMINATED':\n\t            control = <div className={'serverStatusIconContainer'} title={'The server is stopped. Click to start.'} onClick={this.startServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#A9A9A9\" d=\"M7,14 C10.8659932,14 14,10.8659932 14,7         C14,3.13400675 10.8659932,0 7,0         C3.13400675,0 0,3.13400675 0,7         C0,10.8659932 3.13400675,14 7,14 Z         M4,4.99077797 C4,4.44358641 4.45097518,4 4.99077797,4         L9.00922203,4 C9.55641359,4 10,4.45097518 10,4.99077797         L10,9.00922203 C10,9.55641359 9.54902482,10 9.00922203,10         L4.99077797,10 C4.44358641,10 4,9.54902482 4,9.00922203         L4,4.99077797 Z\"></path>  </svg></div>;\n\t            break;\n\t        default:\n\t            break;\n\t    }\n\t    return(\n            <div>{control}</div>\n        );\n\t}\n}\n\nexport default ServerControls;","import React from 'react';\n\nclass CPUControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div style={{textAlign:'center'}}>{this.props.machineType.guestCpus}</div> :\n\t\t\t<div style={{textAlign:'center'}}>{this.props.marxanserver.processor_count}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default CPUControl;\n","import React from 'react';\n\nclass RAMControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div style={{textAlign:'center'}}>{(Number(this.props.machineType.memoryMb)/1000).toFixed(1)} Gb</div> :\n\t\t\t<div style={{textAlign:'center'}}>{this.props.marxanserver.ram}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default RAMControl;\n","import React from 'react';\n\nlet TIMEOUTS = [{text: '2 minutes', minutes: \"2\"},{ text: '1 hour', minutes: \"60\" }, { text: '2 hours', minutes: \"120\" }, { text: '3 hours', minutes: \"180\" }, { text: '4 hours', minutes: \"240\" }, { text: '5 hours', minutes: \"300\" }, { text: '6 hours', minutes: \"360\" }, { text: '7 hours', minutes: \"420\" }, { text: '8 hours', minutes: \"480\" }];\n\nclass StartDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { timeout: \"60\", username: '', password: ''};\n    }\n    startServer() {\n        this.props.setUserPassword(this.state.username, this.state.password);\n        this.props.setMachineType();\n        this.props.setTimeout(this.state.timeout);\n        this.props.hideStartDialog();\n    }\n    onCancel(e) {\n        this.props.hideStartDialog();\n    }\n    setTimeout(e) {\n        this.setState({ timeout: e.target.value });\n    }\n    changeUser(e) {\n        this.setState({ username: e.target.value });\n    }\n    changePassword(e) {\n        this.setState({ password: e.target.value });\n    }\n    render() {\n        let machinetype_options = this.props.machineTypes.map(mt => {\n            return <option value={mt.name} key={mt.name}>{mt.description}</option>;\n        });\n        let timeout_options = TIMEOUTS.map(timeout => {\n            return <option value={timeout.minutes} key={timeout.text}>{timeout.text}</option>;\n        });\n        return (\n            <div className='dialog' style={{display: (this.props.open) ? 'block' : 'none'}}>\n\t\t\t    <div className='dialoginner'>\n\t\t\t        <div className={'h1'}>Start a hosted service</div>\n    \t\t\t    <div className={'heading'}>Choose a machine type:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.props.onChangeMachineType.bind(this)} value={this.props.machineType}>{machinetype_options}</select>\n    \t\t\t    <div className={'heading'}>Choose a timeout:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.setTimeout.bind(this)} value={this.state.timeout}>{timeout_options}</select>\n    \t\t\t    <div className={'heading'}>Username:</div>\n    \t\t\t    <input type=\"text\" onChange={this.changeUser.bind(this)}/>\n    \t\t\t    <div className={'heading'}>Password:</div>\n    \t\t\t    <input type=\"password\" onChange={this.changePassword.bind(this)}/>\n    \t\t\t    <div className={'toppad20'}>\n    \t\t\t        <button type=\"button\" onClick={this.onCancel.bind(this)}>Cancel</button>\n    \t\t\t        <button type=\"button\" onClick={this.startServer.bind(this)}>OK</button>\n    \t\t\t    </div>\n\t\t\t    </div>\n\t\t\t</div>\n        );\n    }\n}\n\nexport default StartDialog;\n","/*global gapi*/\n/*global fetch*/\n/*global AbortController*/\nimport './App.css';\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport ServerControls from './ServerControls';\nimport CPUControl from './CPUControl';\nimport RAMControl from './RAMControl';\nimport StartDialog from './StartDialog';\nimport 'react-table/react-table.css';\nimport { login, signOut, getVMs, getVM, getMachineTypesForProject } from './computeEngineAPI.js';\nimport { isNumber } from './genericFunctions.js';\n\n//CONSTANTS\nlet TORNADO_PATH = \"/marxan-server/\";\nlet GCP_PROJECT = \"marxan-web\";\nlet GCP_REGION = \"us-central1\";\nlet GCP_ZONE = \"us-central1-a\";\n// let GCP_PROJECT = \"geeimageserver\";\n// let GCP_REGION = \"europe-west6\";\n// let GCP_ZONE = \"europe-west6-a\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loginText: \"Sign in\", loginTitle: 'Click to sign in', marxanServers: [], clickedServer: {}, loggedIn: false, vms: [], serversLoaded: false, machineTypes: [], startDialogOpen: false, machineType: '', timeout: 60, invalidLogin: false, failedToStartServer: false, failedToSetMachineType: false };\n    this.initialiseServers(window.MARXAN_SERVERS);\n    this.authenticated = false;\n  }\n  toggleLoginState() {\n    if (this.state.loggedIn){\n      signOut().then(()=>{\n        this.setState({ loggedIn: false, loginText: 'Sign in', loginTitle: 'Signed in as ' });\n      });\n    }else{\n      login().then((basicProfile) => {\n        //set the state\n        this.setState({ loggedIn: true, loginText: 'Sign out', loginTitle: 'Signed in as:' + basicProfile.getName() + \" (\" + basicProfile.getEmail() + \")\" });\n        //get the VMs\n        this._getVMs();\n        //get an array of the machine types available for the project\n        getMachineTypesForProject(GCP_PROJECT, GCP_REGION, GCP_ZONE).then((machineTypes) => {\n          //filter the machine types for c2 types (compute-optimised) and n1 (general purpose)\n          // machineTypes = machineTypes.filter(mt => (mt.name.substr(0, 3) === 'c2-' || mt.name.substr(0, 3) === 'n1-'));\n          //filter the machine types for n1 (general purpose)\n          machineTypes = machineTypes.filter(mt => (mt.name.substr(0, 3) === 'n1-'));\n          //filter the machine types for available ones only\n          machineTypes = machineTypes.filter(mt => (mt.available));\n          //sort by the description\n          this.sortObjectArray(machineTypes, 'guestCpus');\n          this.setState({ machineTypes: machineTypes });\n        });\n      });\n    }\n  }\n  //gets a list of VMs for the project and zone\n  _getVMs() {\n    //get the VMs\n    getVMs(GCP_PROJECT, GCP_ZONE).then((_vms) => {\n      //if the initial state of any of the VMs is STOPPING, PROVISIONING,STAGING,REPAIRING then start polling as they will change\n      let dynamicStatuses = new Set(['STOPPING', 'PROVISIONING','STAGING','REPAIRING']);\n      _vms.forEach(_vm=>{\n        if (dynamicStatuses.has(_vm.status)) this.pollServer(_vm);\n      });\n      this.setState({ vms: _vms });\n    });\n  }\n  //gets data for a single VM\n  _getVM(server) {\n    getVM(GCP_PROJECT, GCP_ZONE, server.name).then((_vm) => {\n      //get the matching marxan server from the VM\n      let marxanserver = this.getMarxanServerForVM(server.name);\n      //see if the servers status has changed\n      if (this.vmConfig.status !== _vm.status) {\n        //if the server has stopped or started, then stop polling and remove any timeouts\n        if (_vm.status === 'TERMINATED' || _vm.status === 'RUNNING') {\n          clearInterval(this.vm_timer);\n          this.timer = undefined;\n          //update the marxan servers shutdowntime\n          this.updateMarxanServerShutdowntime(marxanserver, undefined);\n          //if the server has started, then poll to see when the marxan-server has started\n          if (_vm.status === 'RUNNING') this.pollMarxanServer(server);\n        }\n        //if the server is stopping then set the server as offline\n        if (_vm.status === 'STOPPING') {\n          //update the state\n          this.updateMarxanServerStatus(marxanserver, true);\n        }\n        //if the server is stopping after a provisioninf status, then the start failed\n        if (this.vmConfig.status ===\"PROVISIONING\" && _vm.status === \"STOPPING\"){\n          this.setState({failedToStartServer: true});\n        }\n        //update the state\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === server.name) ? Object.assign(item, { status: _vm.status }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms });\n        //save the current configuration to a local variable\n        this.vmConfig = _vm;\n      }\n\n    });\n  }\n  //sorts an object array by the passed sort field\n  sortObjectArray(arr, sortField) {\n    arr.sort((a, b) => {\n      if (isNumber(a[sortField])) {\n        if ((a[sortField] < b[sortField]))\n          return -1;\n        if (a[sortField] > b[sortField])\n          return 1;\n        return 0;\n      }\n      else {\n        if ((a[sortField].toLowerCase() < b[sortField].toLowerCase()) || (a.type === \"local\"))\n          return -1;\n        if (a[sortField].toLowerCase() > b[sortField].toLowerCase())\n          return 1;\n        return 0;\n      }\n    });\n  }\n  //starts polling the server to check for an updated status\n  pollServer(server) {\n    //cancel any polling to marxan if it is happening\n    if (this.timer) this.clearMarxanPolling();\n    //get the initial server configuration\n    this.vmConfig = server;\n    this._getVM(server);\n    //start polling the server at regular intervals\n    this.vm_timer = setInterval(() => {\n      this._getVM(server);\n    }, 1000);\n  }\n  //starts polling the marxan server to check to see when it is online/offline\n  pollMarxanServer(server) {\n    //get the corresponding marxanserver instance\n    let marxanserver = this.getMarxanServerForVM(server.name);\n    //set the offline property to undefined - this will show the loader\n    this.updateMarxanServerStatus(marxanserver, undefined);\n    //poll the server to see if it is ready\n    this.timer = setInterval(async () => {\n      let _marxanserver = await this.getServerCapabilities(marxanserver);\n      //if the _marxanserver is online then update state, stop polling and set it to shutdown \n      if (!_marxanserver.offline) {\n        this.clearMarxanPolling();\n        //update the state\n        this.updateMarxanServerStatus(marxanserver, false);\n        //authenticate to the marxan-server\n        if (!this.authenticated) {\n          await this.authenticate(marxanserver);\n          //authenticated - now set up the shutdown\n          await this.setupShutdown(marxanserver, server);\n        }\n      }\n    }, 1000);\n  }\n  clearMarxanPolling() {\n    clearInterval(this.timer);\n    this.timeout = undefined;\n  }\n  //authenticates to the marxan server - if successful sets a cookie to be able to call shutdown\n  async authenticate(marxanserver) {\n    try{\n      let response = await fetch(marxanserver.endpoint + \"validateUser?user=\" + this.state.username + \"&password=\" + this.state.password);\n      if (!response.ok) {\n        throw Error(\"fetch returned a 404 or 500 error: \" + response.statusText);\n      }\n      const json = await response.json();\n      if (json.hasOwnProperty('error')){\n        alert(json.error);\n        this.setState({ invalidLogin: true });\n      }else{\n        this.authenticated = true;\n      }\n    }catch(error){\n      this.setState({ invalidLogin: true });\n      console.log(\"fetch failed with: \" + error);\n    }\n  }\n  //calls shutdown on the marxan server\n  async setupShutdown(marxanserver, server){\n    //get the time now\n    let d = new Date();\n    //get the shutdown time\n    let miliSecondsTimeout = Number(this.state.timeout)*60000;\n    let shutdowntime = new Date(d.getTime() + miliSecondsTimeout).toString();\n    //update the marxan servers shutdowntime\n    this.updateMarxanServerShutdowntime(marxanserver, shutdowntime);\n    //set the shutdown timer\n    await this.callShutdown(marxanserver, this.state.timeout);\n    //configure a callback to start polling the server just before it is stopped\n    setTimeout(() => {\n      this.pollServer(server);\n    }, miliSecondsTimeout - 1000);\n  }\n  //makes the API call to shutdown the marxan-server\n  async callShutdown(marxanserver, timeout){\n    try{\n      const controller = new AbortController();\n      const signal = controller.signal;   \n      const timeoutId = setTimeout(() => controller.abort(), 1000);\n      const response = await fetch(marxanserver.endpoint + \"shutdown?delay=\" + timeout, {credentials:\"include\", signal: signal });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw Error(\"fetch returned a 404 or 500 error: \" + response.statusText);\n      }\n      const json = await response.json();\n      if (json.hasOwnProperty('error')){\n        alert(json.error + '\\nUnable to shutdown automatically. Please do it manually.');\n      }\n    }catch(error){\n      console.log(\"fetch failed with: \" + error);\n    }\n  }\n  //get marxan server for the VM\n  getMarxanServerForVM(instanceName) {\n    let matching_marxanservers = this.state.marxanServers.filter((item) => (item.instanceName === instanceName));\n    let retVal = (matching_marxanservers.length) ? matching_marxanservers[0] : undefined;\n    return retVal;\n  }\n  //get VM for the marxan server\n  getVMForMarxanServer(server) {\n    if (server.hasOwnProperty('instanceName')) {\n      //iterate through the VM instances to see if we can get a matching one for the marxan server\n      let matching_vms = this.state.vms.filter((item) => (item.name === server.instanceName));\n      //if we have a matching server then return it\n      if (matching_vms.length) {\n        return matching_vms[0];\n      }\n      else {\n        return null;\n      }\n    }\n    else {\n      return null;\n    }\n  }\n  //updates the status of the passed marxan server - status is true/false (offline)\n  updateMarxanServerStatus(marxanserver, status) {\n    //update the state\n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanserver.name) ? Object.assign(item, { offline: status }) : item;\n      return _obj;\n    });\n    this.setState({ marxanServers: _marxanservers });\n  }\n  updateMarxanServerShutdowntime(marxanserver, shutdowntime){\n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanserver.name) ? Object.assign(item, { shutdowntime: shutdowntime }) : item;\n      return _obj;\n    });\n    //set the state\n    this.setState({marxanServers: _marxanservers});\n  }\n  //prompts the user to select a machine type and then starts it\n  configureServer(server) {\n    //get the current machine type\n    let machineType = this.getMachineType(server);\n    machineType = (machineType) ? machineType : { name: '' };\n    //show the machine types dialog\n    this.setState({failedToStartServer: false, failedToSetMachineType: false, startDialogOpen: true, machineType: machineType.name, clickedServer: server});\n  }\n  hideStartDialog() {\n    this.setState({ startDialogOpen: false });\n  }\n  onChangeMachineType(event) {\n    this.setState({ machineType: event.target.value });\n  }\n  //sets the machine type to the passed value and starts the VM\n  setMachineType() {\n    //setMachineType requires the full url - so get this from the machineTypes array\n    let _mt = this.state.machineTypes.filter(_mt => (_mt.name === this.state.machineType));\n    if (_mt.length) {\n      let fullMachineType = _mt[0].selfLink;\n      return gapi.client.compute.instances.setMachineType({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': this.state.clickedServer.name, 'resource': { 'machineType': fullMachineType } }).then((response) => {\n        //update the state with the new machine type\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === this.state.clickedServer.name) ? Object.assign(item, { machineType: fullMachineType }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms});\n        //start the VM\n        this.startVM(this.state.clickedServer);\n      },((err)=>{ \n        this.setState({failedToSetMachineType: true}); \n        console.log(err);\n      }));\n    }\n  }\n  //sets the timeout for how long the server will be running until it shuts down\n  setTimeout(minutes) {\n    this.setState({ timeout: minutes });\n  }\n  setUserPassword(username, password) {\n    this.setState({ username: username, password: password, invalidLogin: false });\n  }\n  //starts a VM\n  startVM(server) {\n    return gapi.client.compute.instances.start({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Start requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  async stopVM(marxanserver, server) {\n    //update the marxan servers shutdowntime\n    this.updateMarxanServerShutdowntime(marxanserver, undefined);\n    await this.callShutdown(marxanserver, 0);\n    return gapi.client.compute.instances.stop({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Stop requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  renderControls(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    if (vm) {\n      return <ServerControls server={vm} startServer={this.configureServer.bind(this, vm)} stopServer={this.stopVM.bind(this,row.original, vm)}/>;\n    }\n    else {\n      return null;\n    }\n  }\n  renderWithTitle(attribute, row){\n    return <div title={row.original[attribute]}>{row.original[attribute]}</div>;        \n  }\n  renderStatus(row) {\n    return (row.original.offline === undefined) ? \"Starting\" : (row.original.offline) ? \"Offline\" : \"Available\";\n  }\n  renderCPUs(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <CPUControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  renderRAM(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM then we can get the machine type\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <RAMControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  renderSpace(row){\n    return <div title={row.original.disk_space} style={{textAlign:'center'}}>{row.original.disk_space}</div>;        \n  }\n  renderShutdownTime(row){\n    //get the local time\n    let local_time = (row.original.shutdowntime !== undefined) ? new Date(Date.parse(row.original.shutdowntime)).toLocaleString() : '';\n    //if there is not a shutdown time and the server is online then set to never\n    if (local_time === '' && row.original.offline === false) local_time = \"Never\";\n    return <div>{local_time}</div>;\n  }\n  renderLink(row){\n    return (row.original.offline === false) ? <div><a href={'https://app.marxanweb.org/?server=' + row.original.name} target=\"_app\" rel=\"noopener noreferrer\" title='Open hosted service in the Marxan Web app'>open</a></div> : \"\";  \n  }\n  //gets the machine type for the VM\n  getMachineType(vm) {\n    let machineTypes = this.state.machineTypes.filter(item => item.selfLink === vm.machineType);\n    return (machineTypes.length) ? machineTypes[0] : null;\n  }\n  //initialises the servers by requesting their capabilities\n  initialiseServers(marxanServers) {\n    return new Promise((resolve, reject) => {\n      //get all the server capabilities - when all the servers have responded, finalise the marxanServers array\n      this.getAllServerCapabilities(marxanServers).then((server) => {\n        //sort the servers by the name \n        this.sortObjectArray(marxanServers, 'name');\n        this.setState({ marxanServers: marxanServers, serversLoaded: true }, () => {\n          resolve(\"ServerData retrieved\");\n        });\n      });\n    });\n  }\n  //gets the capabilities of all servers\n  async getAllServerCapabilities(marxanServers) {\n    let promises = await marxanServers.map(async server=>{\n      await this.getServerCapabilities(server);\n    });\n    await Promise.all(promises);\n  }\n\n  //gets the capabilities of the server by making a request to the getServerData method\n  async getServerCapabilities(server) {\n    //get the endpoint for all http/https requests\n    let endpoint = server.protocol + \"//\" + server.host + \":\" + server.port + TORNADO_PATH;\n    //set the default properties for the server - by default the server is offline, has no guest access and CORS is not enabled\n    server = Object.assign(server, { endpoint: endpoint, offline: true, guestUserEnabled: false });\n    //poll the server to make sure tornado is running\n    try{\n      const controller = new AbortController();\n      const signal = controller.signal;   \n      const timeoutId = setTimeout(() => controller.abort(), 1000);\n      const response = await fetch(endpoint + \"getServerData\", { signal });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        throw Error(\"fetch returned a 404 or 500 error: \" + response.statusText);\n      }\n      const json = await response.json();\n      if (json.hasOwnProperty('info')) {\n        //set the flags for the server capabilities\n        server = Object.assign(server, { offline: false, machine: json.serverData.MACHINE, client_version: json.serverData.MARXAN_CLIENT_VERSION, server_version: json.serverData.MARXAN_SERVER_VERSION, node: json.serverData.NODE, processor: json.serverData.PROCESSOR, processor_count: json.serverData.PROCESSOR_COUNT, ram: json.serverData.RAM, release: json.serverData.RELEASE, system: json.serverData.SYSTEM, version: json.serverData.VERSION, wdpa_version: json.serverData.WDPA_VERSION, planning_grid_units_limit: Number(json.serverData.PLANNING_GRID_UNITS_LIMIT), disk_space: json.serverData.DISK_FREE_SPACE, shutdowntime:json.serverData.SHUTDOWNTIME });\n        //if the server defines its own name then set it \n        if (json.serverData.SERVER_NAME !== \"\") {\n          server = Object.assign(server, { name: json.serverData.SERVER_NAME });\n        }\n        //if the server defines its own description then set it \n        if (json.serverData.SERVER_DESCRIPTION !== \"\") {\n          server = Object.assign(server, { description: json.serverData.SERVER_DESCRIPTION });\n        }\n      }\n    }catch(error){\n      console.log(\"fetch failed with: \" + error);\n    }\n    return server;\n  }\n  render() {\n    let tableCols = [\n      { Header: 'marxan-server', width: 100, headerStyle: { 'textAlign': 'left' }, Cell: this.renderStatus.bind(this) },\n      { Header: 'Name', width: 200, headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'name') },\n      // { Header: 'Host', width: 158, headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'host') },\n      { Header: 'Description', headerStyle: { 'textAlign': 'left' }, Cell: this.renderWithTitle.bind(this, 'description') },\n      { Header: 'CPUs', width: 50, headerStyle: { 'textAlign': 'center' }, Cell: this.renderCPUs.bind(this) },\n      { Header: 'RAM', width: 50, headerStyle: { 'textAlign': 'center' }, Cell: this.renderRAM.bind(this) },\n      { Header: 'Space', width: 55, headerStyle: { 'textAlign': 'center' }, Cell: this.renderSpace.bind(this) },\n      { Header: 'Shutdown', width: 135, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }, Cell: this.renderShutdownTime.bind(this) }\n    ];\n    //add the controls column to the table if the user is logged in\n    if (this.state.loggedIn) tableCols.unshift({ Header: 'VM', accessor: 'controlsEnabled', width: 30, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }, Cell: this.renderControls.bind(this) });\n    //add the link column if there are any servers online\n    let online_servers = this.state.marxanServers.filter(item=>item.offline===false);\n    if (online_servers.length) tableCols.push({ Header: '', width: 35, headerStyle: { 'textAlign': 'left' }, Cell: this.renderLink.bind(this) });\n    //add a \n    return (\n      <div className={'mainbody'}>\n      <div className={'mainbodycontent'}>\n          <div className={'title'}>Marxan Web Systematic Conservation Planning</div>\n          <div className={'bodyText'}>Welcome to the Marxan Web Homepage. &lt;bla bla bla&gt;</div>\n          <div className={'tableContainer'} style={{display: (this.state.serversLoaded) ? 'block' : 'none'}}>\n            <div className={'bodyText'}>To use Marxan Web, you can either use one of the hosted services below or you can install and run it on your own local computer or within your organisation.</div>\n            <div className={'h1'}>Hosted services:</div>\n        \t\t<ReactTable \n              className={'serversTable'}\n              showPagination={false} \n              minRows={0}\n              data={this.state.marxanServers}\n              columns={tableCols}\n        \t\t/> \n        \t\t<div className={'invalidLogin'} style={{display: (this.state.invalidLogin) ? 'block' : 'none'}}>Invalid login credentials - unable to shutdown automatically. Please do it manually.</div>\n        \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToStartServer) ? 'block' : 'none'}}>Failed to start server. Stopping. Try fewer CPUs.</div>\n        \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToSetMachineType) ? 'block' : 'none'}}>Failed to set the machine type. Try a different one.</div>\n      \t\t</div>\n      \t\t<div className={'h1'}>Installation:</div>\n      \t\t<div>For installation instructions, see the <a href='https://docs.marxanweb.org/admin.html' rel=\"noopener noreferrer\" target='_blank'>Administrators Documentation</a></div>\n      \t\t<StartDialog \n      \t\t  open={this.state.startDialogOpen} \n      \t\t  machineTypes={this.state.machineTypes} \n      \t\t  machineType={this.state.machineType} \n      \t\t  onChangeMachineType={this.onChangeMachineType.bind(this)} \n      \t\t  setMachineType={this.setMachineType.bind(this)} \n      \t\t  hideStartDialog={this.hideStartDialog.bind(this)} \n      \t\t  setTimeout={this.setTimeout.bind(this)} \n      \t\t  setUserPassword={this.setUserPassword.bind(this)}\n      \t\t  marxanserverendpoint={this.state.marxanserverendpoint}\n      \t\t/>\n          <div className={'loginBtn'} onClick={this.toggleLoginState.bind(this)}>\n              <div className={'logodiv'}>\n                <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"18px\" height=\"18px\" viewBox=\"0 0 48 48\" class=\"_svg\"><g><path fill=\"#EA4335\" d=\"M24 9.5c3.54 0 6.71 1.22 9.21 3.6l6.85-6.85C35.9 2.38 30.47 0 24 0 14.62 0 6.51 5.38 2.56 13.22l7.98 6.19C12.43 13.72 17.74 9.5 24 9.5z\"></path><path fill=\"#4285F4\" d=\"M46.98 24.55c0-1.57-.15-3.09-.38-4.55H24v9.02h12.94c-.58 2.96-2.26 5.48-4.78 7.18l7.73 6c4.51-4.18 7.09-10.36 7.09-17.65z\"></path><path fill=\"#FBBC05\" d=\"M10.53 28.59c-.48-1.45-.76-2.99-.76-4.59s.27-3.14.76-4.59l-7.98-6.19C.92 16.46 0 20.12 0 24c0 3.88.92 7.54 2.56 10.78l7.97-6.19z\"></path><path fill=\"#34A853\" d=\"M24 48c6.48 0 11.93-2.13 15.89-5.81l-7.73-6c-2.15 1.45-4.92 2.3-8.16 2.3-6.26 0-11.57-4.22-13.47-9.91l-7.98 6.19C6.51 42.62 14.62 48 24 48z\"></path><path fill=\"none\" d=\"M0 0h48v48H0z\"></path></g></svg>        \n                <div className={'logintext'} title={this.state.loginTitle}>{this.state.loginText}</div>\n              </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}