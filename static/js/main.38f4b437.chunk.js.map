{"version":3,"sources":["genericFunctions.js","ServerControls.js","CPUControl.js","RAMControl.js","StartDialog.js","App.js","serviceWorker.js","index.js","status-working-28.gif","computeEngineAPI.js"],"names":["module","exports","isNumber","str","test","ServerControls","this","props","startServer","server","stopServer","control","status","className","title","src","working","alt","onClick","bind","viewBox","fill","d","React","Component","CPUControl","machineType","guestCpus","marxanserver","processor_count","RAMControl","Number","memoryMb","toFixed","ram","TIMEOUTS","text","minutes","StartDialog","state","timeout","username","password","setUserPassword","setMachineType","setTimeout","hideStartDialog","e","setState","target","value","machinetype_options","machineTypes","map","mt","name","key","description","timeout_options","style","display","open","onChange","onChangeMachineType","type","changeUser","changePassword","onCancel","GCP_ZONE","App","marxanServers","clickedServer","loggedIn","vms","serversLoaded","startDialogOpen","invalidLogin","failedToStartServer","failedToSetMachineType","initialiseServers","window","MARXAN_SERVERS","login","then","_getVMs","getMachineTypesForProject","filter","available","sortObjectArray","getVMs","_vms","getVM","_vm","vmConfig","clearInterval","vm_timer","timer","undefined","pollMarxanServer","setOffline","item","Object","assign","arr","sortField","sort","a","b","toLowerCase","getMarxanServerForVM","updateMarxanServerStatus","clearMarxanPolling","_getVM","setInterval","getServerCapabilities","offline","authenticateMS","setupShutdown","Promise","resolve","reject","fetchJsonp","endpoint","response","json","hasOwnProperty","catch","ex","Date","shutdowntime","getTime","toString","_marxanservers","shutdown","console","log","instanceName","matching_marxanservers","length","matching_vms","marxanServer","getMachineType","event","_mt","fullMachineType","selfLink","gapi","client","compute","instances","startVM","err","start","pollServer","error","stop","row","vm","getVMForMarxanServer","original","configureServer","stopVM","getAllServerCapabilities","promiseArray","i","push","all","protocol","host","port","guestUserEnabled","machine","serverData","MACHINE","client_version","MARXAN_CLIENT_VERSION","server_version","MARXAN_SERVER_VERSION","node","NODE","processor","PROCESSOR","PROCESSOR_COUNT","RAM","release","RELEASE","system","SYSTEM","version","VERSION","wdpa_version","WDPA_VERSION","planning_grid_units_limit","PLANNING_GRID_UNITS_LIMIT","disk_space","DISK_FREE_SPACE","SERVER_NAME","SERVER_DESCRIPTION","tableCols","Header","accessor","width","headerStyle","Cell","renderStatus","renderCPUs","renderRAM","unshift","borderRight","renderControls","_login","showPagination","minRows","data","columns","marxanserverendpoint","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","loadOAuth2Client","authenticate","loadClient","load","auth2","init","client_id","getAuthInstance","signIn","scope","project","zone","list","result","items","resourceId","get","region","getProjectRegion","projectData","cpu_quota","quotas","metric","limit","getProject","projects","regions"],"mappings":"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","file":"static/js/main.38f4b437.chunk.js","sourcesContent":["module.exports = {\n\t// returns a boolean if it is a valid number\n\tisNumber: function (str) {\n\t\tvar pattern = /^\\d+$/;\n\t\treturn pattern.test(str); \n\t}\n};","import React from 'react';\nimport working from './status-working-28.gif';\n\nclass ServerControls extends React.Component {\n    startServer(){\n        this.props.startServer(this.props.server);\n    }\n    stopServer(){\n        this.props.stopServer(this.props.server);\n    }\n\trender() {\n\t    let control;\n\t    switch (this.props.server.status) {\n\t    \tcase 'PROVISIONING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being provisioned'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'STAGING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being staged'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t    \tcase 'RUNNING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is running. Click to stop.'} onClick={this.stopServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#00C752\" d=\"M5.50183983,10.4944805 L5.50367966,10.4963203         L12.8482451,3.15175489         C13.5762779,4.25592793 14,5.57848014 14,7         C14,10.866 10.866,14 7,14 C3.134,14 0,10.866 0,7         C0,3.134 3.134,0 7,0         C8.67832535,0 10.218695,0.590646458 11.4245848,1.57541523         L11.4245848,1.57541523 L5.50183983,7.49816017         L3.50183983,5.49816017 L2.00183983,6.99816017         L5.5,10.4963203 L5.50183983,10.4944805 Z\"></path>  </svg></div>;\n\t    \t\tbreak;\n\t        case 'STOPPING':\n\t        \tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being stopped'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t        \tbreak;\n\t    \tcase 'REPAIRING':\n\t    \t\tcontrol = <div className={'serverStatusIconContainer'} title={'The server is being repaired'}><img className={\"p6n-icon-status-working\"} src={working} alt=\"The server is being stopped\"/></div>;\n\t    \t\tbreak;\n\t        case 'TERMINATED':\n\t            control = <div className={'serverStatusIconContainer'} title={'The server is stopped. Click to start.'} onClick={this.startServer.bind(this)}><svg viewBox=\"0 0 14 14\">    <path fill=\"#A9A9A9\" d=\"M7,14 C10.8659932,14 14,10.8659932 14,7         C14,3.13400675 10.8659932,0 7,0         C3.13400675,0 0,3.13400675 0,7         C0,10.8659932 3.13400675,14 7,14 Z         M4,4.99077797 C4,4.44358641 4.45097518,4 4.99077797,4         L9.00922203,4 C9.55641359,4 10,4.45097518 10,4.99077797         L10,9.00922203 C10,9.55641359 9.54902482,10 9.00922203,10         L4.99077797,10 C4.44358641,10 4,9.54902482 4,9.00922203         L4,4.99077797 Z\"></path>  </svg></div>;\n\t            break;\n\t        default:\n\t            break;\n\t    }\n\t    return(\n            <div>{control}</div>\n        );\n\t}\n}\n\nexport default ServerControls;","import React from 'react';\n\nclass CPUControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div>{this.props.machineType.guestCpus}</div> :\n\t\t\t<div>{this.props.marxanserver.processor_count}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default CPUControl;\n","import React from 'react';\n\nclass RAMControl extends React.Component {\n\trender() {\n\t\tlet control = (this.props.machineType) ?\n\t\t\t<div>{(Number(this.props.machineType.memoryMb)/1000).toFixed(1)} Gb</div> :\n\t\t\t<div>{this.props.marxanserver.ram}</div>;\n\t\treturn (\n\t\t\tcontrol\n\t\t);\n\t}\n}\n\nexport default RAMControl;\n","import React from 'react';\n\nlet TIMEOUTS = [{ text: '1 hour', minutes: \"60\" }, { text: '2 hours', minutes: \"120\" }, { text: '3 hours', minutes: \"180\" }, { text: '4 hours', minutes: \"240\" }, { text: '5 hours', minutes: \"300\" }, { text: '6 hours', minutes: \"360\" }, { text: '7 hours', minutes: \"420\" }, { text: '8 hours', minutes: \"480\" }];\n\nclass StartDialog extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { timeout: \"60\", username: '', password: ''};\n    }\n    startServer() {\n        this.props.setUserPassword(this.state.username, this.state.password);\n        this.props.setMachineType();\n        this.props.setTimeout(this.state.timeout);\n        this.props.hideStartDialog();\n    }\n    onCancel(e) {\n        this.props.hideStartDialog();\n    }\n    setTimeout(e) {\n        this.setState({ timeout: e.target.value });\n    }\n    changeUser(e) {\n        this.setState({ username: e.target.value });\n    }\n    changePassword(e) {\n        this.setState({ password: e.target.value });\n    }\n    render() {\n        let machinetype_options = this.props.machineTypes.map(mt => {\n            return <option value={mt.name} key={mt.name}>{mt.description}</option>;\n        });\n        let timeout_options = TIMEOUTS.map(timeout => {\n            return <option value={timeout.minutes} key={timeout.text}>{timeout.text}</option>;\n        });\n        return (\n            <div className='dialog' style={{display: (this.props.open) ? 'block' : 'none'}}>\n\t\t\t    <div className='dialoginner'>\n    \t\t\t    <div className={'heading'}>Choose a machine type:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.props.onChangeMachineType.bind(this)} value={this.props.machineType}>{machinetype_options}</select>\n    \t\t\t    <div className={'heading'}>Choose a timeout:</div>\n    \t\t\t    <select className={'toppad10'} onChange={this.setTimeout.bind(this)} value={this.state.timeout}>{timeout_options}</select>\n    \t\t\t    <div className={'heading'}>Username:</div>\n    \t\t\t    <input type=\"text\" onChange={this.changeUser.bind(this)}/>\n    \t\t\t    <div className={'heading'}>Password:</div>\n    \t\t\t    <input type=\"password\" onChange={this.changePassword.bind(this)}/>\n    \t\t\t    <div className={'toppad20'}>\n    \t\t\t        <button type=\"button\" onClick={this.onCancel.bind(this)}>Cancel</button>\n    \t\t\t        <button type=\"button\" onClick={this.startServer.bind(this)}>OK</button>\n    \t\t\t    </div>\n\t\t\t    </div>\n\t\t\t</div>\n        );\n    }\n}\n\nexport default StartDialog;\n","/*global gapi*/\nimport './App.css';\nimport React from 'react';\nimport ReactTable from 'react-table';\nimport ServerControls from './ServerControls';\nimport CPUControl from './CPUControl';\nimport RAMControl from './RAMControl';\nimport StartDialog from './StartDialog';\nimport 'react-table/react-table.css';\nimport fetchJsonp from 'fetch-jsonp';\nimport { login, getVMs, getVM, getMachineTypesForProject } from './computeEngineAPI.js';\nimport { isNumber } from './genericFunctions.js';\n\n//CONSTANTS\nlet TORNADO_PATH = \"/marxan-server/\";\nlet GCP_PROJECT = \"marxan-web\";\nlet GCP_REGION = \"us-central1\";\nlet GCP_ZONE = \"us-central1-a\";\n// let GCP_PROJECT = \"geeimageserver\";\n// let GCP_REGION = \"europe-west6\";\n// let GCP_ZONE = \"europe-west6-a\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { marxanServers: [], clickedServer: {}, loggedIn: false, vms: [], serversLoaded: false, machineTypes: [], startDialogOpen: false, machineType: '', timeout: 60, invalidLogin: false, failedToStartServer: false, failedToSetMachineType: false };\n    this.initialiseServers(window.MARXAN_SERVERS);\n  }\n  _login() {\n    login().then(() => {\n      //set the state\n      this.setState({ loggedIn: true });\n      //get the VMs\n      this._getVMs();\n      //get an array of the machine types available for the project\n      getMachineTypesForProject(GCP_PROJECT, GCP_REGION, GCP_ZONE).then((machineTypes) => {\n        //filter the machine types for c2 types (compute-optimised) and n1 (general purpose)\n        // machineTypes = machineTypes.filter(mt => (mt.name.substr(0, 3) === 'c2-' || mt.name.substr(0, 3) === 'n1-'));\n        //filter the machine types for available ones only\n        machineTypes = machineTypes.filter(mt => (mt.available));\n        //sort by the description\n        this.sortObjectArray(machineTypes, 'guestCpus');\n        this.setState({ machineTypes: machineTypes });\n      });\n    });\n  }\n  //gets a list of VMs for the project and zone\n  _getVMs() {\n    //get the VMs\n    getVMs(GCP_PROJECT, GCP_ZONE).then((_vms) => {\n      this.setState({ vms: _vms });\n    });\n  }\n  //gets data for a single VM\n  _getVM(server) {\n    getVM(GCP_PROJECT, GCP_ZONE, server.name).then((_vm) => {\n      //see if the servers status has changed\n      if (this.vmConfig.status !== _vm.status) {\n        //if the server has stopped or started, then stop polling\n        if (_vm.status === 'TERMINATED' || _vm.status === 'RUNNING') {\n          clearInterval(this.vm_timer);\n          this.timer = undefined;\n          //if the server has started, then poll to see when the marxan-server has started\n          if (_vm.status === 'RUNNING') this.pollMarxanServer(server);\n        }\n        //if the server is stopping then set the server as offline\n        if (_vm.status === 'STOPPING') this.setOffline(server);\n        //if the server is stopping after a provisioninf status, then the start failed\n        if (this.vmConfig.status ===\"PROVISIONING\" && _vm.status === \"STOPPING\"){\n          this.setState({failedToStartServer: true});\n        }\n        //update the state\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === server.name) ? Object.assign(item, { status: _vm.status }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms });\n        //save the current configuration to a local variable\n        this.vmConfig = _vm;\n      }\n\n    });\n  }\n  //sorts an object array by the passed sort field\n  sortObjectArray(arr, sortField) {\n    arr.sort((a, b) => {\n      if (isNumber(a[sortField])) {\n        if ((a[sortField] < b[sortField]))\n          return -1;\n        if (a[sortField] > b[sortField])\n          return 1;\n        return 0;\n      }\n      else {\n        if ((a[sortField].toLowerCase() < b[sortField].toLowerCase()) || (a.type === \"local\"))\n          return -1;\n        if (a[sortField].toLowerCase() > b[sortField].toLowerCase())\n          return 1;\n        return 0;\n      }\n    });\n  }\n  //sets the marxanserver as offline\n  setOffline(server) {\n    //get the matching marxan server from the VM\n    let marxanserver = this.getMarxanServerForVM(server.name);\n    //update the state\n    this.updateMarxanServerStatus(marxanserver, true);\n  }\n  //starts polling the server to check for an updated status\n  pollServer(server) {\n    //cancel any polling to marxan if it is happening\n    if (this.timer) this.clearMarxanPolling();\n    //get the initial server configuration\n    this.vmConfig = server;\n    this._getVM(server);\n    //start polling the server at regular intervals\n    this.vm_timer = setInterval(() => {\n      this._getVM(server);\n    }, 1000);\n  }\n  //starts polling the marxan server to check to see when it is online/offline\n  pollMarxanServer(server) {\n    //get the corresponding marxanserver instance\n    let marxanserver = this.getMarxanServerForVM(server.name);\n    //set the offline property to undefined - this will show the loader\n    this.updateMarxanServerStatus(marxanserver, undefined);\n    //poll the server to see if it is ready\n    this.timer = setInterval(() => {\n      this.getServerCapabilities(marxanserver).then((server) => {\n        //if the server is online then update state, stop polling and set it to shutdown \n        if (!server.offline) {\n          this.clearMarxanPolling();\n          //update the state\n          this.updateMarxanServerStatus(marxanserver, false);\n          //authenticate to the marxan-server\n          this.authenticateMS(marxanserver).then(()=>{\n            this.setupShutdown(marxanserver);\n          });\n        }\n      });\n    }, 1000);\n  }\n  //authenticates to the marxan server - if successful sets a cookie to be able to call shutdown\n  authenticateMS(marxanserver) {\n    return new Promise((resolve, reject) => {\n      fetchJsonp(marxanserver.endpoint + \"validateUser?user=\" + this.state.username + \"&password=\" + this.state.password).then((response) => {\n        return response.json();\n      }).then((json) => {\n        if (json.hasOwnProperty('error')) {\n          this.setState({ invalidLogin: true });\n          reject();\n        }\n        resolve();\n      }).catch((ex) => {\n        this.setState({ invalidLogin: true });\n        reject();\n      });\n    });\n  }\n  //calls shutdown on the marxan server\n  setupShutdown(marxanserver){\n    //get the time now\n    let d = new Date();\n    //get the shutdown time\n    let shutdowntime = new Date(d.getTime() + ((Number(this.state.timeout))*60000)).toString();\n    //update the marxan servers \n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanserver.name) ? Object.assign(item, { shutdowntime: shutdowntime }) : item;\n      return _obj;\n    });\n    //set the state\n    this.setState({shutdown: shutdowntime, marxanServers: _marxanservers});\n    //set the shutdown timer\n    fetchJsonp(marxanserver.endpoint + \"shutdown?delay=\" + this.state.timeout, { timeout: 1000 }).then((response) => {\n      return response.json();\n    }).then((json) => {\n      console.log(json);\n    }).catch((ex) => {\n      console.log(ex);\n    });\n  }\n  clearMarxanPolling() {\n    clearInterval(this.timer);\n    this.timeout = undefined;\n  }\n  //get marxan server for the VM\n  getMarxanServerForVM(instanceName) {\n    let matching_marxanservers = this.state.marxanServers.filter((item) => (item.instanceName === instanceName));\n    let retVal = (matching_marxanservers.length) ? matching_marxanservers[0] : undefined;\n    return retVal;\n  }\n  //get VM for the marxan server\n  getVMForMarxanServer(server) {\n    if (server.hasOwnProperty('instanceName')) {\n      //iterate through the VM instances to see if we can get a matching one for the marxan server\n      let matching_vms = this.state.vms.filter((item) => (item.name === server.instanceName));\n      //if we have a matching server then return it\n      if (matching_vms.length) {\n        return matching_vms[0];\n      }\n      else {\n        return null;\n      }\n    }\n    else {\n      return null;\n    }\n  }\n  //updates the status of the passed marxan server - status is true/false (offline)\n  updateMarxanServerStatus(marxanServer, status) {\n    //update the state\n    let _marxanservers = this.state.marxanServers;\n    _marxanservers.map(item => {\n      let _obj = (item.name === marxanServer.name) ? Object.assign(item, { offline: status }) : item;\n      return _obj;\n    });\n    this.setState({ marxanServers: _marxanservers });\n  }\n  //prompts the user to select a machine type and then starts it\n  configureServer(server) {\n    //get the current machine type\n    let machineType = this.getMachineType(server);\n    machineType = (machineType) ? machineType : { name: '' };\n    //show the machine types dialog\n    this.setState({failedToStartServer: false, failedToSetMachineType: false, startDialogOpen: true, machineType: machineType.name, clickedServer: server});\n  }\n  hideStartDialog() {\n    this.setState({ startDialogOpen: false });\n  }\n  onChangeMachineType(event) {\n    this.setState({ machineType: event.target.value });\n  }\n  //sets the machine type to the passed value and starts the VM\n  setMachineType() {\n    //setMachineType requires the full url - so get this from the machineTypes array\n    let _mt = this.state.machineTypes.filter(_mt => (_mt.name === this.state.machineType));\n    if (_mt.length) {\n      let fullMachineType = _mt[0].selfLink;\n      return gapi.client.compute.instances.setMachineType({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': this.state.clickedServer.name, 'resource': { 'machineType': fullMachineType } }).then((response) => {\n        //update the state with the new machine type\n        let _vms = this.state.vms;\n        _vms.map(item => {\n          let _obj = (item.name === this.state.clickedServer.name) ? Object.assign(item, { machineType: fullMachineType }) : item;\n          return _obj;\n        });\n        this.setState({ vms: _vms});\n        //start the VM\n        this.startVM(this.state.clickedServer);\n      },((err)=>{ \n        this.setState({failedToSetMachineType: true}); \n        console.log(err);\n      }));\n    }\n  }\n  //sets the timeout for how long the server will be running until it shuts down\n  setTimeout(minutes) {\n    this.setState({ timeout: minutes });\n  }\n  setUserPassword(username, password) {\n    this.setState({ username: username, password: password, invalidLogin: false });\n  }\n  //starts a VM\n  startVM(server) {\n    return gapi.client.compute.instances.start({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Start requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  stopVM(server) {\n    return gapi.client.compute.instances.stop({ \"project\": GCP_PROJECT, \"zone\": GCP_ZONE, 'instance': server.name }).then((response) => {\n        console.log(\"Stop requested\");\n        //poll the server\n        this.pollServer(server);\n      },\n      function(err) { console.error(\"Execute error\", err); });\n  }\n  renderControls(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    if (vm) {\n      return <ServerControls server={vm} startServer={this.configureServer.bind(this)} stopServer={this.stopVM.bind(this)}/>;\n    }\n    else {\n      return null;\n    }\n  }\n  renderStatus(row) {\n    return (row.original.offline === undefined) ? \"Starting\" : (row.original.offline) ? \"Offline\" : \"Available\";\n  }\n  renderCPUs(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM name so we can add the controls\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <CPUControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  renderRAM(row) {\n    //get the VM machine for this server\n    let vm = this.getVMForMarxanServer(row.original);\n    //the server has a VM then we can get the machine type\n    let machineType = (vm) ? this.getMachineType(vm) : null;\n    return <RAMControl machineType={machineType} marxanserver={row.original}/>;\n  }\n  //gets the machine type for the VM\n  getMachineType(vm) {\n    let machineTypes = this.state.machineTypes.filter(item => item.selfLink === vm.machineType);\n    return (machineTypes.length) ? machineTypes[0] : null;\n  }\n  //initialises the servers by requesting their capabilities\n  initialiseServers(marxanServers) {\n    return new Promise((resolve, reject) => {\n      //get all the server capabilities - when all the servers have responded, finalise the marxanServer array\n      this.getAllServerCapabilities(marxanServers).then((server) => {\n        //sort the servers by the name \n        this.sortObjectArray(marxanServers, 'name');\n        this.setState({ marxanServers: marxanServers, serversLoaded: true }, () => {\n          resolve(\"ServerData retrieved\");\n        });\n      });\n    });\n  }\n  //gets the capabilities of all servers\n  getAllServerCapabilities(marxanServers) {\n    let promiseArray = [];\n    //iterate through the servers and get their capabilities\n    for (var i = 0; i < marxanServers.length; ++i) {\n      promiseArray.push(this.getServerCapabilities(marxanServers[i]));\n    }\n    //return a promise\n    return Promise.all(promiseArray);\n  }\n\n  //gets the capabilities of the server by making a request to the getServerData method\n  getServerCapabilities(server) {\n    return new Promise((resolve, reject) => {\n      //get the endpoint for all http/https requests\n      let endpoint = server.protocol + \"//\" + server.host + \":\" + server.port + TORNADO_PATH;\n      //set the default properties for the server - by default the server is offline, has no guest access and CORS is not enabled\n      server = Object.assign(server, { endpoint: endpoint, offline: true, guestUserEnabled: false });\n      //poll the server to make sure tornado is running - this uses fetchJsonp which can catch http errors\n      fetchJsonp(endpoint + \"getServerData\", { timeout: 1000 }).then((response) => {\n        return response.json();\n      }).then((json) => {\n        if (json.hasOwnProperty('info')) {\n          //set the flags for the server capabilities\n          server = Object.assign(server, { offline: false, machine: json.serverData.MACHINE, client_version: json.serverData.MARXAN_CLIENT_VERSION, server_version: json.serverData.MARXAN_SERVER_VERSION, node: json.serverData.NODE, processor: json.serverData.PROCESSOR, processor_count: json.serverData.PROCESSOR_COUNT, ram: json.serverData.RAM, release: json.serverData.RELEASE, system: json.serverData.SYSTEM, version: json.serverData.VERSION, wdpa_version: json.serverData.WDPA_VERSION, planning_grid_units_limit: Number(json.serverData.PLANNING_GRID_UNITS_LIMIT), disk_space: json.serverData.DISK_FREE_SPACE });\n          //if the server defines its own name then set it \n          if (json.serverData.SERVER_NAME !== \"\") {\n            server = Object.assign(server, { name: json.serverData.SERVER_NAME });\n          }\n          //if the server defines its own description then set it \n          if (json.serverData.SERVER_DESCRIPTION !== \"\") {\n            server = Object.assign(server, { description: json.serverData.SERVER_DESCRIPTION });\n          }\n        }\n        //return the server capabilities\n        resolve(server);\n      }).catch((ex) => {\n        //the server does not exist or did not respond before the timeout - return the default properties\n        resolve(server);\n      });\n    });\n  }\n  render() {\n    let tableCols = [\n      { Header: 'Status', accessor: '', width: 105, headerStyle: { 'textAlign': 'left' }, Cell: this.renderStatus.bind(this) },\n      { Header: 'Name', accessor: 'name', width: 215, headerStyle: { 'textAlign': 'left' } },\n      { Header: 'Host', accessor: 'host', width: 215, headerStyle: { 'textAlign': 'left' } },\n      { Header: 'Description', accessor: 'description', headerStyle: { 'textAlign': 'left' } },\n      { Header: 'CPUs', accessor: '', width: 50, headerStyle: { 'textAlign': 'left' }, Cell: this.renderCPUs.bind(this) },\n      { Header: 'RAM', accessor: 'ram', width: 50, headerStyle: { 'textAlign': 'left' }, Cell: this.renderRAM.bind(this) },\n      { Header: 'Space', accessor: 'disk_space', width: 50, headerStyle: { 'textAlign': 'left' } }\n    ];\n    //add the controls column to the table if the user is logged in\n    if (this.state.loggedIn) tableCols.unshift({ Header: 'VM', accessor: 'controlsEnabled', width: 30, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }, Cell: this.renderControls.bind(this) });\n    //add the shutdown column if the user has started a vm with a shutdown\n    if (this.state.shutdown) tableCols.push({ Header: 'Shutdown at', accessor: 'shutdowntime', width: 162, headerStyle: { 'textAlign': 'left' }, style: { borderRight: '0px' }});\n    return (\n      <div>\n        <div>Marxan Web</div>\n        <button onClick={this._login.bind(this)}>authorize and load</button>\n        <div className={'tableContainer'} style={{display: (this.state.serversLoaded) ? 'block' : 'none'}}>\n      \t\t<ReactTable \n            className={'serversTable'}\n            showPagination={false} \n            minRows={0}\n            data={this.state.marxanServers}\n            columns={tableCols}\n      \t\t/> \n      \t\t<div className={'invalidLogin'} style={{display: (this.state.invalidLogin) ? 'block' : 'none'}}>Invalid login credentials - unable to shutdown automatically. Please do it manually.</div>\n      \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToStartServer) ? 'block' : 'none'}}>Failed to start server. Stopping. Try fewer CPUs.</div>\n      \t\t<div className={'invalidLogin'} style={{display: (this.state.failedToSetMachineType) ? 'block' : 'none'}}>Failed to set the machine type. Try a different one.</div>\n    \t\t</div>\n    \t\t<StartDialog \n    \t\t  open={this.state.startDialogOpen} \n    \t\t  machineTypes={this.state.machineTypes} \n    \t\t  machineType={this.state.machineType} \n    \t\t  onChangeMachineType={this.onChangeMachineType.bind(this)} \n    \t\t  setMachineType={this.setMachineType.bind(this)} \n    \t\t  hideStartDialog={this.hideStartDialog.bind(this)} \n    \t\t  setTimeout={this.setTimeout.bind(this)} \n    \t\t  setUserPassword={this.setUserPassword.bind(this)}\n    \t\t  marxanserverendpoint={this.state.marxanserverendpoint}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/status-working-28.639a9d71.gif\";","/*global gapi*/\nmodule.exports = {\n\tlogin: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t//get the OAuth2 client library\n\t\t\tmodule.exports.loadOAuth2Client().then(() => {\n\t\t\t\t//authenticate the user\n\t\t\t\tmodule.exports.authenticate().then(() => {\n\t\t\t\t\t//load the Compute API\n\t\t\t\t\tmodule.exports.loadClient().then(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t},\n\tloadOAuth2Client: function() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.load(\"client:auth2\", function() {\n\t\t\t\t// gapi.auth2.init({ client_id: \"525442053161-ua4flmb201fv8m2tek8ijhuobohur4vs.apps.googleusercontent.com\" }); //for a.cottam\n\t\t\t\tgapi.auth2.init({ client_id: \"956491209288-m1fj9h3udhiviuj0hdvajrp8o7pn13g8.apps.googleusercontent.com\" }); //for marxancloud\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t},\n\tauthenticate: function() {\n\t\treturn gapi.auth2.getAuthInstance()\n\t\t\t.signIn({ scope: \"https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/compute https://www.googleapis.com/auth/compute.readonly\" })\n\t\t\t.then(function() { console.log(\"Sign-in successful\"); },\n\t\t\t\tfunction(err) { console.error(\"Error signing in\", err); });\n\t},\n\tloadClient: function() {\n\t\treturn gapi.client.load(\"https://content.googleapis.com/discovery/v1/apis/compute/v1/rest\")\n\t\t\t.then(function() { console.log(\"GAPI client loaded for API\"); },\n\t\t\t\tfunction(err) { console.error(\"Error loading GAPI client for API\", err); });\n\t},\n\t//gets the VM instances for the project/zone\n\tgetVMs: function(project, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\t//add the project and zone to each vm\n\t\t\t\tlet _vms = response.result.items.map(item => Object.assign(item, { project: project, zone: zone }));\n\t\t\t\tresolve(_vms);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets data for a single VM\n\tgetVM: function(project, zone, resourceId) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.instances.get({ \"project\": project, \"zone\": zone, 'instance': resourceId }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineTypesForProject: function(project, region, zone) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.list({ \"project\": project, \"zone\": zone }).then((response) => {\n\t\t\t\tlet machineTypes = response.result.items;\n\t\t\t\t//not all machine types will be available - it will depend of whether you are on a free trial and other factors - but the quota can be retrieved\n\t\t\t\tmodule.exports.getProjectRegion(project, region).then((projectData) => {\n\t\t\t\t\t//get the CPU quota\n\t\t\t\t\tlet cpu_quota = projectData.quotas.filter(item=>item.metric==='CPUS')[0].limit;\n\t\t\t\t\t//add an attribute to all the machine types\n\t\t\t\t\tmachineTypes = machineTypes.map(item=>{\n\t\t\t\t\t\treturn Object.assign(item, {available: item.guestCpus <= cpu_quota});\n\t\t\t\t\t});\n\t\t\t\t\tresolve(machineTypes);\n\t\t\t\t});\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project and its quotas\n\tgetProject: function(project) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.projects.get({ \"project\": project }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the project in the region and its quotas\n\tgetProjectRegion: function(project, region) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.regions.get({ \"project\": project, \"region\": region }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t},\n\t//gets the machine type details for the machine type\n\tgetMachineType: function(project, zone, machineType) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tgapi.client.compute.machineTypes.get({ \"project\": project, \"zone\": zone, 'machineType': machineType }).then((response) => {\n\t\t\t\tresolve(response.result);\n\t\t\t}, (err) => reject(err));\n\t\t});\n\t}\n};\n"],"sourceRoot":""}